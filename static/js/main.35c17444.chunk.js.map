{"version":3,"sources":["serviceWorker.js","constants.js","Accounts.js","actions/accounts.js","AccountDetails.js","ContactModal.js","Contacts.js","Account.js","App.js","index.js","reducers/accounts.js"],"names":["Boolean","window","location","hostname","match","INDUSTRY_OPTIONS","RATING_OPTIONS","LEAD_SOURCE_OPTIONS","STATE_OPTIONS","AL","AK","AS","AZ","AR","CA","CO","CT","DE","DC","FL","GA","GU","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VA","VI","WA","WV","WI","WY","Accounts","props","state","name","industry","rating","annualRevenue","greaterAnnualRevenue","lessAnnualRevenue","establishedDate","afterEstablishedDate","beforeEstablishedDate","handleOneDimensionalFilter","bind","handleRevenueChange","handleEstablishedDateChange","filterByName","filterBySelectOption","filterByGreaterAnnualRevenue","filterByLessAnnualRevenue","filterByAfterEstablishedDate","filterByBeforeEstablishedDate","event","target","this","setState","value","account","toLowerCase","includes","fieldKey","filter","address","Number","parseFloat","isNaN","dateString","split","year","month","date","Date","parseInt","convertDateStringToDate","getTime","options","renderedOptions","Object","keys","map","optKey","key","unshift","Jumbotron","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","size","type","onChange","renderSelectOptions","InputGroup","className","Prepend","Text","id","street","city","accounts","onClick","history","push","renderAccountAddress","toString","renderFilterForm","to","Table","striped","bordered","hover","scope","renderAccounts","Component","withRouter","createAccount","createAction","accountDetails","nanoid","payload","updateAccount","accountId","update","removeAccount","addContact","contact","updateContact","contactId","contactDetails","removeContact","REQUIRED_FIELDS","AccountDetails","validated","isEditable","isNewAccount","copyAccountToStateForm","switchToEditable","switchToUnEditable","handleInputChange","handleSubmit","isValidInput","reduce","memo","preventDefault","accountKeys","allFieldsValid","every","fieldValue","trim","hasAllRequiredFields","stopPropagation","xs","Button","variant","disabled","noValidate","onSubmit","required","renderControlButtons","mapDispatchToProps","connect","EMAIL_REGEX","ContactModal","phone","email","leadSource","closeModal","contactKeys","test","url","Modal","show","onHide","Header","closeButton","Title","Body","pattern","Footer","Fragment","contacts","width","height","viewBox","fill","xmlns","fillRule","d","path","render","params","find","Account","ownProps","exact","store","configureStore","reducer","action","concat","accountIndex","findIndex","updatedAccount","updatedState","slice","splice","contactIndex","preloadedState","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.35c17444.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const INDUSTRY_AGRICULTURE = 'agriculture';\nexport const INDUSTRY_APPAREL = 'apparel';\nexport const INDUSTRY_BANKING = 'banking';\nexport const INDUSTRY_BIOTECHNOLOGY = 'biotechnology';\nexport const INDUSTRY_CHEMICALS = 'chemicals';\nexport const INDUSTRY_COMMUNICATIONS = 'communications';\nexport const INDUSTRY_CONSULTING = 'consulting';\nexport const INDUSTRY_EDUCATION = 'education';\nexport const INDUSTRY_ELECTRONICS = 'electronics';\nexport const INDUSTRY_ENERGY = 'energy';\nexport const INDUSTRY_ENTERTAINMENT = 'entertainment';\nexport const INDUSTRY_ENVIRONMENTAL = 'environmental';\nexport const INDUSTRY_FINANCE = 'finance';\nexport const INDUSTRY_FOODANDBEVERAGE = 'foodandbeverage';\nexport const INDUSTRY_GOVERNMENT = 'government';\nexport const INDUSTRY_HEALTHCARE = 'healthcare';\nexport const INDUSTRY_INSURANCE = 'insurance';\nexport const INDUSTRY_MANUFACTURING = 'manufacturing';\nexport const INDUSTRY_MEDIA = 'media';\nexport const INDUSTRY_RECREATION = 'recreation';\nexport const INDUSTRY_RETAIL = 'retail';\nexport const INDUSTRY_SHIPPING = 'shipping';\nexport const INDUSTRY_TECHNOLOGY = 'technology';\nexport const INDUSTRY_TELECOMMUNICATIONS = 'telecommunications';\nexport const INDUSTRY_TRANSPORTATION = 'transportation';\nexport const INDUSTRY_UTILITIES = 'utilities';\nexport const INDUSTRY_OTHER = 'other';\n\nexport const INDUSTRY_OPTIONS = {\n  [INDUSTRY_AGRICULTURE]: 'Agriculture',\n  [INDUSTRY_APPAREL]: 'Apparel',\n  [INDUSTRY_BANKING]: 'Banking',\n  [INDUSTRY_BIOTECHNOLOGY]: 'Biotechnology',\n  [INDUSTRY_CHEMICALS]: 'Chemicals',\n  [INDUSTRY_COMMUNICATIONS]: 'Communications',\n  [INDUSTRY_CONSULTING]: 'Consulting',\n  [INDUSTRY_EDUCATION]: 'Education',\n  [INDUSTRY_ELECTRONICS]: 'Electronics',\n  [INDUSTRY_ENERGY]: 'Energy',\n  [INDUSTRY_ENTERTAINMENT]: 'Entertainment',\n  [INDUSTRY_ENVIRONMENTAL]: 'Environmental',\n  [INDUSTRY_FINANCE]: 'Finance',\n  [INDUSTRY_FOODANDBEVERAGE]: 'Food & Beverage',\n  [INDUSTRY_GOVERNMENT]: 'Government',\n  [INDUSTRY_HEALTHCARE]: 'Healthcare',\n  [INDUSTRY_INSURANCE]: 'Insurance',\n  [INDUSTRY_MANUFACTURING]: 'Manufacturing',\n  [INDUSTRY_MEDIA]: 'Media',\n  [INDUSTRY_RECREATION]: 'Recreation',\n  [INDUSTRY_RETAIL]: 'Retail',\n  [INDUSTRY_SHIPPING]: 'Shipping',\n  [INDUSTRY_TECHNOLOGY]: 'Technology',\n  [INDUSTRY_TELECOMMUNICATIONS]: 'Telecommunications',\n  [INDUSTRY_TRANSPORTATION]: 'Transportation',\n  [INDUSTRY_UTILITIES]: 'Utilities',\n  [INDUSTRY_OTHER]: 'Other'\n};\n\nexport const RATING_HOT = 'hot';\nexport const RATING_WARM = 'warm';\nexport const RATING_COLD = 'cold';\n\nexport const RATING_OPTIONS = {\n  [RATING_HOT]: 'Hot',\n  [RATING_WARM]: 'Warm',\n  [RATING_COLD]: 'Cold'\n};\n\nexport const LEAD_SOURCE_WEB = 'web';\nexport const LEAD_SOURCE_PHONE = 'phone';\nexport const LEAD_SOURCE_PARTNERREFERRAL = 'partnerreferral';\nexport const LEAD_SOURCE_PURCHASEDLIST = 'purchasedlist';\nexport const LEAD_SOURCE_OTHER = 'other';\n\nexport const LEAD_SOURCE_OPTIONS = {\n  [LEAD_SOURCE_WEB]: 'Web',\n  [LEAD_SOURCE_PHONE]: 'Phone',\n  [LEAD_SOURCE_PARTNERREFERRAL]: 'Partner Referral',\n  [LEAD_SOURCE_PURCHASEDLIST]: 'Purchased List',\n  [LEAD_SOURCE_OTHER]: 'Other'\n};\n\nexport const STATE_OPTIONS = {\n  AL: 'Alabama',\n  AK: 'Alaska',\n  AS: 'American Samoa',\n  AZ: 'Arizona',\n  AR: 'Arkansas',\n  CA: 'California',\n  CO: 'Colorado',\n  CT: 'Connecticut',\n  DE: 'Delaware',\n  DC: 'District of Columbia',\n  FL: 'Florida',\n  GA: 'Georgia',\n  GU: 'Guam',\n  HI: 'Hawaii',\n  ID: 'Idaho',\n  IL: 'Illinois',\n  IN: 'Indiana',\n  IA: 'Iowa',\n  KS: 'Kansas',\n  KY: 'Kentucky',\n  LA: 'Louisiana',\n  ME: 'Maine',\n  MD: 'Maryland',\n  MA: 'Massachusetts',\n  MI: 'Michigan',\n  MN: 'Minnesota',\n  MS: 'Mississippi',\n  MO: 'Missouri',\n  MT: 'Montana',\n  NE: 'Nebraska',\n  NV: 'Nevada',\n  NH: 'New Hampshire',\n  NJ: 'New Jersey',\n  NM: 'New Mexico',\n  NY: 'New York',\n  NC: 'North Carolina',\n  ND: 'North Dakota',\n  OH: 'Ohio',\n  OK: 'Oklahoma',\n  OR: 'Oregon',\n  PA: 'Pennsylvania',\n  PR: 'Puerto Rico',\n  RI: 'Rhode Island',\n  SC: 'South Carolina',\n  SD: 'South Dakota',\n  TN: 'Tennessee',\n  TX: 'Texas',\n  UT: 'Utah',\n  VT: 'Vermont',\n  VA: 'Virginia',\n  VI: 'Virgin Islands',\n  WA: 'Washington',\n  WV: 'West Virginia',\n  WI: 'Wisconsin',\n  WY: 'Wyoming'\n};\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Link, withRouter} from 'react-router-dom';\nimport {Form, Col, Row, Jumbotron, Table, InputGroup} from 'react-bootstrap';\n\nimport {RATING_OPTIONS, INDUSTRY_OPTIONS, STATE_OPTIONS} from './constants';\n\nimport './Accounts.css';\n\nexport class Accounts extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      industry: '',\n      rating: '',\n      state: '',\n      annualRevenue: {\n        greaterAnnualRevenue: '',\n        lessAnnualRevenue: ''\n      },\n      establishedDate: {\n        afterEstablishedDate: '',\n        beforeEstablishedDate: ''\n      }\n    };\n\n    this.handleOneDimensionalFilter = this.handleOneDimensionalFilter.bind(this);\n    this.handleRevenueChange = this.handleRevenueChange.bind(this);\n    this.handleEstablishedDateChange = this.handleEstablishedDateChange.bind(this);\n    this.filterByName = this.filterByName.bind(this);\n    this.filterBySelectOption = this.filterBySelectOption.bind(this);\n    this.filterByGreaterAnnualRevenue = this.filterByGreaterAnnualRevenue.bind(this);\n    this.filterByLessAnnualRevenue = this.filterByLessAnnualRevenue.bind(this);\n    this.filterByAfterEstablishedDate = this.filterByAfterEstablishedDate.bind(this);\n    this.filterByBeforeEstablishedDate = this.filterByBeforeEstablishedDate.bind(this);\n  }\n\n  handleOneDimensionalFilter(event) {\n    const target = event.target;\n    const name = target.name;\n    this.setState({\n      ...this.state,\n      [name]: target.value\n    });\n  }\n\n  handleRevenueChange(event) {\n    const target = event.target;\n    const name = target.name;\n    this.setState({\n      annualRevenue: {\n        ...this.state.annualRevenue,\n        [name]: target.value\n      }\n    });\n  }\n\n  handleEstablishedDateChange(event) {\n    const target = event.target;\n    const name = target.name;\n    this.setState({\n      establishedDate: {\n        ...this.state.establishedDate,\n        [name]: target.value\n      }\n    });\n  }\n\n  filterByName(account) {\n    if (this.state.name) {\n      return account.name.toLowerCase().includes(this.state.name.toLowerCase());\n    }\n    return true;\n  }\n\n  filterBySelectOption(fieldKey, account) {\n    const filter = this.state[fieldKey];\n\n    if (!filter) {\n      return true;\n    }\n\n    if (fieldKey === 'state') {\n      return account.address.state === filter;\n    }\n\n    return account[fieldKey] === filter;\n  }\n\n  filterByGreaterAnnualRevenue(account) {\n    const greaterAnnualRevenue = Number.parseFloat(this.state.annualRevenue.greaterAnnualRevenue);\n\n    if (Number.isNaN(greaterAnnualRevenue) === false) {\n      return account.annualRevenue >= greaterAnnualRevenue;\n    }\n    return true;\n  }\n\n  filterByLessAnnualRevenue(account) {\n    const lessAnnualRevenue = Number.parseFloat(this.state.annualRevenue.lessAnnualRevenue);\n\n    if (Number.isNaN(lessAnnualRevenue) === false) {\n      return account.annualRevenue <= lessAnnualRevenue;\n    }\n    return true;\n  }\n\n  convertDateStringToDate(dateString) {\n    const [year, month, date] = dateString.split('-');\n    return new Date(year, Number.parseInt(month) - 1, date);\n  }\n\n  filterByAfterEstablishedDate(account) {\n    if (this.state.establishedDate.afterEstablishedDate) {\n      return (\n        this.convertDateStringToDate(account.establishedDate).getTime() >=\n        this.convertDateStringToDate(this.state.establishedDate.afterEstablishedDate).getTime()\n      );\n    }\n    return true;\n  }\n\n  filterByBeforeEstablishedDate(account) {\n    if (this.state.establishedDate.beforeEstablishedDate) {\n      return (\n        this.convertDateStringToDate(account.establishedDate).getTime() <=\n        this.convertDateStringToDate(this.state.establishedDate.beforeEstablishedDate).getTime()\n      );\n    }\n    return true;\n  }\n\n  renderSelectOptions(options) {\n    const renderedOptions = Object.keys(options).map((optKey) => (\n      <option key={optKey} value={optKey}>\n        {options[optKey]}\n      </option>\n    ));\n    renderedOptions.unshift(<option key=\"blank\" value=\"\"></option>);\n    return renderedOptions;\n  }\n\n  renderFilterForm() {\n    return (\n      <Jumbotron>\n        <h4>Filter Accounts</h4>\n        <Form>\n          <Form.Group as={Row} controlId=\"name\">\n            <Form.Label column sm={2}>\n              Name\n            </Form.Label>\n            <Col>\n              <Form.Control\n                size=\"sm\"\n                name=\"name\"\n                type=\"text\"\n                value={this.state.name}\n                onChange={this.handleOneDimensionalFilter}\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"state\">\n            <Form.Label column sm={2}>\n              State\n            </Form.Label>\n            <Col>\n              <Form.Control\n                size=\"sm\"\n                name=\"state\"\n                as=\"select\"\n                value={this.state.state}\n                onChange={this.handleOneDimensionalFilter}\n              >\n                {this.renderSelectOptions(STATE_OPTIONS)}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"industry\">\n            <Form.Label column sm={2}>\n              Industry\n            </Form.Label>\n            <Col>\n              <Form.Control\n                size=\"sm\"\n                name=\"industry\"\n                value={this.state.industry}\n                as=\"select\"\n                onChange={this.handleOneDimensionalFilter}\n              >\n                {this.renderSelectOptions(INDUSTRY_OPTIONS)}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"annualRevenue\">\n            <Form.Label column sm={2}>\n              Annual Revenue\n            </Form.Label>\n            <Col>\n              <InputGroup size=\"sm\" className=\"mb-3\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"basic-addon1\">Less Than</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  name=\"lessAnnualRevenue\"\n                  type=\"number\"\n                  value={this.state.annualRevenue.lessAnnualRevenue}\n                  onChange={this.handleRevenueChange}\n                />\n              </InputGroup>\n              <InputGroup size=\"sm\" className=\"mb-3\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"basic-addon1\">Greater Than</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  name=\"greaterAnnualRevenue\"\n                  type=\"number\"\n                  value={this.state.annualRevenue.greaterAnnualRevenue}\n                  onChange={this.handleRevenueChange}\n                />\n              </InputGroup>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"rating\">\n            <Form.Label column sm={2}>\n              Rating\n            </Form.Label>\n            <Col>\n              <Form.Control\n                size=\"sm\"\n                name=\"rating\"\n                value={this.state.rating}\n                as=\"select\"\n                onChange={this.handleOneDimensionalFilter}\n              >\n                {this.renderSelectOptions(RATING_OPTIONS)}\n              </Form.Control>\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row} controlId=\"industry\">\n            <Form.Label column sm={2}>\n              Industry\n            </Form.Label>\n            <Col>\n              <InputGroup size=\"sm\" className=\"mb-3\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"basic-addon1\">After</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  name=\"afterEstablishedDate\"\n                  type=\"date\"\n                  value={this.state.establishedDate.afterEstablishedDate}\n                  onChange={this.handleEstablishedDateChange}\n                />\n              </InputGroup>\n              <InputGroup size=\"sm\" className=\"mb-3\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"basic-addon1\">Before</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  name=\"beforeEstablishedDate\"\n                  type=\"date\"\n                  value={this.state.establishedDate.beforeEstablishedDate}\n                  onChange={this.handleEstablishedDateChange}\n                />\n              </InputGroup>\n            </Col>\n          </Form.Group>\n        </Form>\n      </Jumbotron>\n    );\n  }\n\n  renderAccountAddress(address) {\n    return `${address.street} ${address.city}, ${STATE_OPTIONS[address.state]}`;\n  }\n\n  renderAccounts() {\n    return this.props.accounts\n      .filter(this.filterByName)\n      .filter(this.filterBySelectOption.bind(this, 'industry'))\n      .filter(this.filterBySelectOption.bind(this, 'rating'))\n      .filter(this.filterBySelectOption.bind(this, 'state'))\n      .filter(this.filterByGreaterAnnualRevenue)\n      .filter(this.filterByLessAnnualRevenue)\n      .filter(this.filterByAfterEstablishedDate)\n      .filter(this.filterByBeforeEstablishedDate)\n      .map((account) => {\n        return (\n          <tr\n            key={account.id}\n            onClick={() => {\n              this.props.history.push(`/accounts/${account.id}`);\n            }}\n          >\n            <td>{account.name}</td>\n            <td>{this.renderAccountAddress(account.address)}</td>\n            <td>{INDUSTRY_OPTIONS[account.industry]}</td>\n            <td>{account.annualRevenue}</td>\n            <td>{RATING_OPTIONS[account.rating]}</td>\n            <td>{account.establishedDate.toString()}</td>\n          </tr>\n        );\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"accounts\">\n        {this.renderFilterForm()}\n        <div className=\"row\">\n          <Link className=\"mb-3 btn btn-primary\" to=\"/accounts/new\">\n            Add Account\n          </Link>\n        </div>\n        <div className=\"row\">\n          <Table striped bordered hover>\n            <thead className=\"thead-dark\">\n              <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Address</th>\n                <th scope=\"col\">Industry</th>\n                <th scope=\"col\">Revenue</th>\n                <th scope=\"col\">Rating</th>\n                <th scope=\"col\">Est. Date</th>\n              </tr>\n            </thead>\n            <tbody>{this.renderAccounts()}</tbody>\n          </Table>\n        </div>\n      </div>\n    );\n  }\n}\n\nAccounts.propTypes = {\n  accounts: PropTypes.array.isRequired,\n  history: PropTypes.object.isRequired\n};\n\nexport default withRouter(Accounts);\n","import {createAction, nanoid} from '@reduxjs/toolkit';\n\nexport const createAccount = createAction('accounts/create', (accountDetails, history) => {\n  const id = nanoid();\n  history.push(`/accounts/${id}`);\n\n  return {\n    payload: {\n      ...accountDetails,\n      id\n    }\n  };\n});\n\nexport const updateAccount = createAction('accounts/update', (accountId, accountDetails) => {\n  return {\n    payload: {\n      accountId,\n      update: {\n        ...accountDetails\n      }\n    }\n  };\n});\n\nexport const removeAccount = createAction('accounts/remove');\n\nexport const addContact = createAction('accounts/addContact', (accountId, contact) => {\n  return {\n    payload: {\n      accountId,\n      contact: {\n        ...contact,\n        id: nanoid()\n      }\n    }\n  };\n});\n\nexport const updateContact = createAction(\n  'accounts/updateContact',\n  (accountId, contactId, contactDetails) => {\n    return {\n      payload: {\n        accountId,\n        contactId,\n        update: {\n          ...contactDetails\n        }\n      }\n    };\n  }\n);\n\nexport const removeContact = createAction('accounts/removeContact', (accountId, contactId) => {\n  return {\n    payload: {\n      accountId,\n      contactId\n    }\n  };\n});\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Form, Button, Col, Jumbotron} from 'react-bootstrap';\nimport {withRouter} from 'react-router';\nimport {connect} from 'react-redux';\n\nimport {\n  INDUSTRY_OPTIONS,\n  RATING_OPTIONS,\n  INDUSTRY_AGRICULTURE,\n  RATING_HOT,\n  STATE_OPTIONS\n} from './constants';\nimport {createAccount, updateAccount, removeAccount} from './actions/accounts';\n\nconst REQUIRED_FIELDS = [\n  'name',\n  'street',\n  'city',\n  'state',\n  'industry',\n  'annualRevenue',\n  'rating',\n  'establishedDate'\n];\n\nexport class AccountDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    const account = props.account;\n\n    this.state = {\n      validated: false,\n      isEditable: this.isNewAccount(),\n      account: this.isNewAccount()\n        ? {\n            name: '',\n            street: '',\n            city: '',\n            state: 'AL',\n            industry: INDUSTRY_AGRICULTURE,\n            annualRevenue: '',\n            rating: RATING_HOT,\n            establishedDate: ''\n          }\n        : this.copyAccountToStateForm(account)\n    };\n\n    this.switchToEditable = this.switchToEditable.bind(this);\n    this.switchToUnEditable = this.switchToUnEditable.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.isValidInput = this.isValidInput.bind(this);\n  }\n\n  copyAccountToStateForm(account) {\n    return REQUIRED_FIELDS.reduce((memo, fieldKey) => {\n      if (fieldKey === 'street' || fieldKey === 'city' || fieldKey === 'state') {\n        memo[fieldKey] = account.address[fieldKey];\n      } else {\n        memo[fieldKey] = account[fieldKey];\n      }\n      return memo;\n    }, {});\n  }\n\n  isNewAccount() {\n    return this.props.account === null;\n  }\n\n  switchToEditable(event) {\n    event.preventDefault();\n    this.setState({\n      isEditable: true,\n      validated: false\n    });\n  }\n\n  switchToUnEditable(event) {\n    event.preventDefault();\n    if (this.isNewAccount()) {\n      this.props.history.push('/');\n    } else {\n      this.setState({\n        isEditable: false,\n        account: this.copyAccountToStateForm(this.props.account)\n      });\n    }\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const name = target.name;\n\n    this.setState({\n      account: {\n        ...this.state.account,\n        [name]: target.value\n      }\n    });\n  }\n\n  isValidInput() {\n    const account = this.state.account;\n    const accountKeys = Object.keys(account);\n\n    const allFieldsValid = accountKeys.every((key) => {\n      const fieldValue = account[key];\n      if (typeof fieldValue === 'string') {\n        return fieldValue.trim() !== '';\n      }\n      return fieldValue !== -1;\n    });\n    const hasAllRequiredFields = REQUIRED_FIELDS.every((key) => accountKeys.includes(key));\n\n    return allFieldsValid && hasAllRequiredFields;\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (this.isValidInput() === false) {\n      this.setState({\n        validated: true\n      });\n    } else {\n      const account = {\n        ...this.state.account,\n        address: {\n          street: this.state.account['street'],\n          city: this.state.account['city'],\n          state: this.state.account['state']\n        }\n      };\n      delete account.street;\n      delete account.city;\n      delete account.state;\n\n      this.setState({\n        isEditable: false\n      });\n      if (this.isNewAccount()) {\n        this.props.createAccount(account, this.props.history);\n      } else {\n        this.props.updateAccount(this.props.account.id, account);\n      }\n    }\n  }\n\n  renderControlButtons() {\n    if (this.state.isEditable) {\n      return (\n        <Form.Row>\n          <Col xs=\"auto\">\n            <Button variant=\"primary\" name=\"save\" type=\"submit\">\n              Save\n            </Button>\n          </Col>\n          <Col xs=\"auto\">\n            <Button\n              variant=\"secondary\"\n              name=\"cancel\"\n              type=\"button\"\n              onClick={this.switchToUnEditable}\n            >\n              Cancel\n            </Button>\n          </Col>\n          {this.isNewAccount() !== true && (\n            <Col xs=\"auto\">\n              <Button\n                variant=\"danger\"\n                name=\"remove\"\n                type=\"button\"\n                onClick={() => {\n                  this.props.removeAccount(this.props.account.id);\n                  this.props.history.push('/');\n                }}\n              >\n                Delete Account\n              </Button>\n            </Col>\n          )}\n        </Form.Row>\n      );\n    }\n\n    return (\n      <Form.Row>\n        <Col xs=\"auto\">\n          <Button variant=\"secondary\" name=\"edit\" type=\"button\" onClick={this.switchToEditable}>\n            Edit\n          </Button>\n        </Col>\n      </Form.Row>\n    );\n  }\n\n  render() {\n    const account = this.state.account;\n    const disabled = this.state.isEditable === false;\n\n    return (\n      <Jumbotron className=\"col\">\n        <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"name\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                name=\"name\"\n                type=\"text\"\n                disabled={disabled}\n                required\n                value={account.name}\n                onChange={this.handleInputChange}\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"industry\">\n              <Form.Label>Industry</Form.Label>\n              <Form.Control\n                name=\"industry\"\n                as=\"select\"\n                disabled={disabled}\n                required\n                value={account.industry}\n                onChange={this.handleInputChange}\n              >\n                {Object.keys(INDUSTRY_OPTIONS).map((optKey) => (\n                  <option key={optKey} value={optKey}>\n                    {INDUSTRY_OPTIONS[optKey]}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"street\">\n              <Form.Label>Street</Form.Label>\n              <Form.Control\n                name=\"street\"\n                type=\"text\"\n                disabled={disabled}\n                required\n                value={account.street}\n                onChange={this.handleInputChange}\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"city\">\n              <Form.Label>City</Form.Label>\n              <Form.Control\n                name=\"city\"\n                type=\"text\"\n                disabled={disabled}\n                required\n                value={account.city}\n                onChange={this.handleInputChange}\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"state\">\n              <Form.Label>State</Form.Label>\n              <Form.Control\n                name=\"state\"\n                as=\"select\"\n                disabled={disabled}\n                required\n                value={account.state}\n                onChange={this.handleInputChange}\n              >\n                {Object.keys(STATE_OPTIONS).map((optKey) => (\n                  <option key={optKey} value={optKey}>\n                    {STATE_OPTIONS[optKey]}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"annualRevenue\">\n              <Form.Label>Annual Revenue</Form.Label>\n              <Form.Control\n                name=\"annualRevenue\"\n                type=\"number\"\n                disabled={disabled}\n                required\n                value={account.annualRevenue}\n                onChange={this.handleInputChange}\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"rating\">\n              <Form.Label>Rating</Form.Label>\n              <Form.Control\n                name=\"rating\"\n                as=\"select\"\n                disabled={disabled}\n                required\n                value={account.rating}\n                onChange={this.handleInputChange}\n              >\n                {Object.keys(RATING_OPTIONS).map((optKey) => (\n                  <option key={optKey} value={optKey}>\n                    {RATING_OPTIONS[optKey]}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"establishedDate\">\n              <Form.Label>Establised Date</Form.Label>\n              <Form.Control\n                name=\"establishedDate\"\n                type=\"date\"\n                disabled={disabled}\n                required\n                value={account.establishedDate}\n                onChange={this.handleInputChange}\n              />\n            </Form.Group>\n          </Form.Row>\n          {this.renderControlButtons()}\n        </Form>\n      </Jumbotron>\n    );\n  }\n}\n\nAccountDetails.propTypes = {\n  account: PropTypes.object,\n  history: PropTypes.object.isRequired,\n  createAccount: PropTypes.func.isRequired,\n  updateAccount: PropTypes.func.isRequired,\n  removeAccount: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = {\n  createAccount,\n  updateAccount,\n  removeAccount\n};\n\nexport default withRouter(\n  connect(\n    null,\n    mapDispatchToProps\n  )(AccountDetails)\n);\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {Modal, Button, Form} from 'react-bootstrap';\nimport {LEAD_SOURCE_WEB, LEAD_SOURCE_OPTIONS} from './constants';\n\nconst REQUIRED_FIELDS = ['name', 'phone', 'email', 'leadSource'];\nconst EMAIL_REGEX = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\n\nclass ContactModal extends Component {\n  constructor(props) {\n    super(props);\n\n    const contact = props.contact;\n    this.state = {\n      validated: false,\n      contact:\n        contact === null\n          ? {\n              name: '',\n              phone: '',\n              email: '',\n              leadSource: LEAD_SOURCE_WEB\n            }\n          : REQUIRED_FIELDS.reduce((memo, fieldKey) => {\n              memo[fieldKey] = contact[fieldKey];\n              return memo;\n            }, {})\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.isValidInput = this.isValidInput.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const name = target.name;\n\n    this.setState({\n      contact: {\n        ...this.state.contact,\n        [name]: target.value\n      }\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (this.isValidInput() === false) {\n      this.setState({\n        validated: true\n      });\n    } else if (this.props.contact === null) {\n      this.props.addContact(this.props.accountId, this.state.contact);\n      this.closeModal();\n    } else {\n      this.props.updateContact(this.props.accountId, this.props.contact.id, this.state.contact);\n      this.closeModal();\n    }\n  }\n\n  isValidInput() {\n    const contact = this.state.contact;\n    const contactKeys = Object.keys(contact);\n\n    const allFieldsValid = contactKeys.every((key) => {\n      const fieldValue = contact[key];\n      if (key === 'email') {\n        return EMAIL_REGEX.test(fieldValue);\n      }\n      if (typeof fieldValue === 'string') {\n        return fieldValue.trim() !== '';\n      }\n      return fieldValue !== -1;\n    });\n    const hasAllRequiredFields = REQUIRED_FIELDS.every((key) => contactKeys.includes(key));\n\n    return allFieldsValid && hasAllRequiredFields;\n  }\n\n  closeModal() {\n    this.props.history.push(this.props.match.url);\n  }\n\n  render() {\n    const contact = this.state.contact;\n\n    return (\n      <Modal show onHide={this.closeModal}>\n        <Modal.Header closeButton>\n          <Modal.Title>Contact</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form noValidate validated={this.state.validated}>\n            <Form.Row>\n              <Form.Group controlId=\"name\">\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                  name=\"name\"\n                  type=\"text\"\n                  required\n                  value={contact.name}\n                  onChange={this.handleInputChange}\n                />\n              </Form.Group>\n              <Form.Group controlId=\"phone\">\n                <Form.Label>Phone</Form.Label>\n                <Form.Control\n                  name=\"phone\"\n                  type=\"text\"\n                  required\n                  value={contact.phone}\n                  onChange={this.handleInputChange}\n                />\n              </Form.Group>\n            </Form.Row>\n            <Form.Row>\n              <Form.Group controlId=\"email\">\n                <Form.Label>Email</Form.Label>\n                <Form.Control\n                  name=\"email\"\n                  type=\"email\"\n                  pattern={EMAIL_REGEX}\n                  required\n                  value={contact.email}\n                  onChange={this.handleInputChange}\n                />\n              </Form.Group>\n              <Form.Group controlId=\"leadSource\">\n                <Form.Label>Lead Source</Form.Label>\n                <Form.Control\n                  name=\"leadSource\"\n                  as=\"select\"\n                  required\n                  value={contact.leadSource}\n                  onChange={this.handleInputChange}\n                >\n                  {Object.keys(LEAD_SOURCE_OPTIONS).map((optKey) => (\n                    <option key={optKey} value={optKey}>\n                      {LEAD_SOURCE_OPTIONS[optKey]}\n                    </option>\n                  ))}\n                </Form.Control>\n              </Form.Group>\n            </Form.Row>\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"primary\" name=\"save\" type=\"submit\" onClick={this.handleSubmit}>\n            Save\n          </Button>\n          <Button variant=\"secondary\" onClick={this.closeModal}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nContactModal.propTypes = {\n  accountId: PropTypes.string.isRequired,\n  contact: PropTypes.object,\n  history: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n  addContact: PropTypes.func.isRequired,\n  updateContact: PropTypes.func.isRequired\n};\n\nexport default ContactModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Button, Table} from 'react-bootstrap';\nimport {connect} from 'react-redux';\nimport {withRouter, Link, Switch, Route, Redirect} from 'react-router-dom';\n\nimport {removeContact, addContact, updateContact} from './actions/accounts';\nimport {LEAD_SOURCE_OPTIONS} from './constants';\nimport ContactModal from './ContactModal';\n\nfunction renderContacts(history, accountId, contacts, removeContact) {\n  return contacts.map((contact) => {\n    return (\n      <tr key={contact.id}>\n        <td>{contact.name}</td>\n        <td>{contact.phone}</td>\n        <td>{contact.email}</td>\n        <td>{LEAD_SOURCE_OPTIONS[contact.leadSource]}</td>\n        <td>\n          <Button\n            className=\"edit\"\n            variant=\"info\"\n            size=\"sm\"\n            onClick={() => {\n              history.push(`/accounts/${accountId}/contacts/${contact.id}`);\n            }}\n          >\n            <svg\n              width=\"1em\"\n              height=\"1em\"\n              viewBox=\"0 0 16 16\"\n              className=\"bi bi-pencil\"\n              fill=\"currentColor\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                fillRule=\"evenodd\"\n                d=\"M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5L13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175l-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z\"\n              />\n            </svg>\n          </Button>\n        </td>\n        <td>\n          <Button\n            className=\"delete\"\n            variant=\"danger\"\n            size=\"sm\"\n            onClick={() => {\n              removeContact(accountId, contact.id);\n            }}\n          >\n            <svg\n              width=\"1em\"\n              height=\"1em\"\n              viewBox=\"0 0 16 16\"\n              className=\"bi bi-trash\"\n              fill=\"currentColor\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\n              <path\n                fillRule=\"evenodd\"\n                d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\n              />\n            </svg>\n          </Button>\n        </td>\n      </tr>\n    );\n  });\n}\n\nexport function Contacts(props) {\n  return (\n    <React.Fragment>\n      <div className=\"row\">\n        <Link className=\"mb-3 btn btn-primary\" to={`${props.match.url}/contacts/new`}>\n          Add Contact\n        </Link>\n      </div>\n      <div className=\"row\">\n        <Table striped bordered hover>\n          <thead className=\"thead-dark\">\n            <tr>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">Phone</th>\n              <th scope=\"col\">Email</th>\n              <th scope=\"col\">Lead Source</th>\n              <th scope=\"col\"></th>\n              <th scope=\"col\"></th>\n            </tr>\n          </thead>\n          <tbody>\n            {renderContacts(props.history, props.accountId, props.contacts, props.removeContact)}\n          </tbody>\n        </Table>\n      </div>\n      <Switch>\n        <Route path={`${props.match.path}/contacts/new`}>\n          <ContactModal\n            accountId={props.accountId}\n            contact={null}\n            match={props.match}\n            history={props.history}\n            addContact={props.addContact}\n            updateContact={props.updateContact}\n          />\n        </Route>\n        <Route\n          path={`${props.match.path}/contacts/:contactId`}\n          render={({match}) => {\n            const contactId = match.params.contactId;\n            const contact = props.contacts.find((contact) => contact.id === contactId);\n\n            if (!contact) {\n              return <Redirect to={props.match.path} />;\n            }\n\n            return (\n              <ContactModal\n                accountId={props.accountId}\n                contact={contact}\n                match={props.match}\n                history={props.history}\n                addContact={props.addContact}\n                updateContact={props.updateContact}\n              />\n            );\n          }}\n        />\n      </Switch>\n    </React.Fragment>\n  );\n}\n\nContacts.propTypes = {\n  accountId: PropTypes.string.isRequired,\n  contacts: PropTypes.array.isRequired,\n  history: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n  removeContact: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = {\n  removeContact,\n  addContact,\n  updateContact\n};\n\nexport default withRouter(\n  connect(\n    null,\n    mapDispatchToProps\n  )(Contacts)\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\n\nimport AccountDetails from './AccountDetails';\nimport Contacts from './Contacts';\n\nfunction Account({account}) {\n  return (\n    <React.Fragment>\n      <div className=\"row\">\n        <Link to=\"/\">\n          <svg\n            width=\"2em\"\n            height=\"2em\"\n            viewBox=\"0 0 16 16\"\n            className=\"bi bi-arrow-left-circle-fill\"\n            fill=\"currentColor\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-4.5.5a.5.5 0 0 0 0-1H5.707l2.147-2.146a.5.5 0 1 0-.708-.708l-3 3a.5.5 0 0 0 0 .708l3 3a.5.5 0 0 0 .708-.708L5.707 8.5H11.5z\"\n            />\n          </svg>\n        </Link>\n      </div>\n      <div className=\"row\">\n        <AccountDetails account={account} />\n      </div>\n      {account !== null && <Contacts accountId={account.id} contacts={account.contacts} />}\n    </React.Fragment>\n  );\n}\n\nAccount.propTypes = {\n  account: PropTypes.object\n};\n\nexport default Account;\n","import React from 'react';\nimport {Switch, Route, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\n\nimport Accounts from './Accounts';\nimport Account from './Account';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App(props) {\n  return (\n    <div className=\"App container\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Accounts accounts={props.accounts} />\n        </Route>\n        <Route\n          path=\"/accounts/:accountId\"\n          render={({match}) => {\n            const accountId = match.params.accountId;\n\n            if (accountId === 'new') {\n              return <Account account={null} />;\n            }\n\n            const account = props.accounts.find((account) => account.id === accountId);\n\n            if (!account) {\n              return <Redirect to=\"/\" />;\n            }\n\n            return <Account account={account} />;\n          }}\n        />\n      </Switch>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    accounts: state\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {configureStore} from '@reduxjs/toolkit';\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport {\n  LEAD_SOURCE_PHONE,\n  INDUSTRY_UTILITIES,\n  RATING_COLD,\n  INDUSTRY_MANUFACTURING,\n  INDUSTRY_EDUCATION,\n  RATING_HOT,\n  RATING_WARM\n} from './constants';\n\nimport accounts from './reducers/accounts';\n\nconst store = configureStore({\n  reducer: accounts,\n  preloadedState: [\n    {\n      id: 'account-1',\n      name: 'Apple inc.',\n      address: {\n        street: '123 Lake St',\n        city: 'Austin',\n        state: 'TX'\n      },\n      industry: INDUSTRY_UTILITIES,\n      annualRevenue: 1000000000,\n      rating: RATING_COLD,\n      establishedDate: '2010-04-07',\n      contacts: [\n        {\n          id: 'contact-1',\n          name: 'New Contact',\n          phone: '55555555555',\n          email: 'contact1@contacts.com',\n          leadSource: LEAD_SOURCE_PHONE\n        }\n      ]\n    },\n    {\n      id: 'account-2',\n      name: 'ABC Construction',\n      address: {\n        street: '999 Old St',\n        city: 'Atlanta',\n        state: 'GA'\n      },\n      industry: INDUSTRY_MANUFACTURING,\n      annualRevenue: 10,\n      rating: RATING_HOT,\n      establishedDate: '2011-01-13',\n      contacts: [\n        {\n          id: 'contact-2',\n          name: 'New Contact',\n          phone: '55555555555',\n          email: 'contact1@contacts.com',\n          leadSource: LEAD_SOURCE_PHONE\n        }\n      ]\n    },\n    {\n      id: 'account-3',\n      name: 'Big Town Realty',\n      address: {\n        street: '999 Old St',\n        city: 'Portland',\n        state: 'OR'\n      },\n      industry: INDUSTRY_EDUCATION,\n      annualRevenue: 941,\n      rating: RATING_WARM,\n      establishedDate: '2012-02-13',\n      contacts: [\n        {\n          id: 'contact-3',\n          name: 'New Contact',\n          phone: '55555555555',\n          email: 'contact1@contacts.com',\n          leadSource: LEAD_SOURCE_PHONE\n        }\n      ]\n    }\n  ]\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {\n  createAccount,\n  updateAccount,\n  removeAccount,\n  addContact,\n  updateContact,\n  removeContact\n} from '../actions/accounts';\n\nexport default function Accounts(state = getInitialState(), action = {}) {\n  switch (action.type) {\n    case createAccount.type: {\n      const account = action.payload;\n      account.contacts = [];\n\n      return state.concat(account);\n    }\n\n    case updateAccount.type: {\n      const accountIndex = state.findIndex((account) => account.id === action.payload.accountId);\n      const account = state[accountIndex];\n\n      const updatedAccount = {\n        ...account,\n        ...action.payload.update,\n        id: account.id,\n        contacts: account.contacts\n      };\n\n      const updatedState = state.slice();\n      updatedState[accountIndex] = updatedAccount;\n\n      return updatedState;\n    }\n\n    case removeAccount.type: {\n      const accountIndex = state.findIndex((account) => account.id === action.payload);\n      const updatedState = state.slice();\n\n      updatedState.splice(accountIndex, 1);\n\n      return updatedState;\n    }\n\n    case addContact.type: {\n      const accountIndex = state.findIndex((account) => account.id === action.payload.accountId);\n      const account = state[accountIndex];\n\n      const updatedAccount = {\n        ...account,\n        contacts: [action.payload.contact, ...account.contacts]\n      };\n\n      const updatedState = state.slice();\n      updatedState[accountIndex] = updatedAccount;\n\n      return updatedState;\n    }\n\n    case updateContact.type: {\n      const accountIndex = state.findIndex((account) => account.id === action.payload.accountId);\n      const account = state[accountIndex];\n\n      const contacts = account.contacts.slice();\n      const contactIndex = contacts.findIndex((contact) => contact.id === action.payload.contactId);\n      const contact = contacts[contactIndex];\n\n      contacts[contactIndex] = {\n        ...contact,\n        ...action.payload.update,\n        id: contact.id\n      };\n\n      const updatedAccount = {\n        ...account,\n        contacts\n      };\n\n      const updatedState = state.slice();\n      updatedState[accountIndex] = updatedAccount;\n\n      return updatedState;\n    }\n\n    case removeContact.type: {\n      const accountIndex = state.findIndex((account) => account.id === action.payload.accountId);\n      const account = state[accountIndex];\n\n      const contacts = account.contacts.slice();\n      const contactIndex = contacts.findIndex((contact) => contact.id === action.payload.contactId);\n\n      contacts.splice(contactIndex, 1);\n\n      const updatedAccount = {\n        ...account,\n        contacts\n      };\n\n      const updatedState = state.slice();\n      updatedState[accountIndex] = updatedAccount;\n\n      return updatedState;\n    }\n\n    default:\n      return state;\n  }\n}\n\nfunction getInitialState() {\n  return [];\n}\n"],"sourceRoot":""}